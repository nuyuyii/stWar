/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverpack;

import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

//transformer
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.dom.DOMSource; 
import javax.xml.transform.stream.StreamResult;
/**
 *
 * @author nuyuyii
 */
@WebService(serviceName = "mvWebService")
public class mvWebService {

    /**
     * Web service operation
     */
    public static NodeList callXML(int func) throws SAXException, IOException, ParserConfigurationException {        
        File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/web/movies.xml");        
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(xmlFile);
            
            if (func==1){
                NodeList nList = doc.getElementsByTagName("film");
                return nList;
            } 
            

        } catch (SAXException se) {
            // Error generated by this application
            // (or a parser-initialization error)
            se.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options 
            // cannot be built
            pce.printStackTrace();
        } catch (IOException ie) {
            // I/O error
            ie.printStackTrace();
        }    
        return null;
    }
    
    @WebMethod(operationName = "checklogin")
    public String checklogin(@WebParam(name = "username") String username, @WebParam(name = "password") String password) {
        String result = "";
        String user[] = {"user1"};
        String pass[] = {"1234"};
        if(user[0].equals(username) && pass[0].equals(password)){
            result = "ยินดีต้อนรับเข้าสู่ระบบ";
            return result;
        } else {
            result = "ไม่สามารถเข้าสู่ระบบได้";
            return result;
        }
    }

    /**
     * Web service operation
     */
    @WebMethod(operationName = "getsqr")
    public int getsqr(@WebParam(name = "no") final int no) {
        //TODO write your implementation code here:
        return no*no;
    }


    /**
     * Web service operation
     */
    @WebMethod(operationName = "serchbyID")
    public String serchbyID(@WebParam(name = "nodeID") final int nodeID) throws Exception  {
        String result = "";
        NodeList nList = callXML(1);
        
        Element nfilm = (Element) nList.item(nodeID-1);
          NodeList childfilm = nfilm.getChildNodes();
          for (int j= 0; j < childfilm.getLength(); j++){
            Node temp = childfilm.item(j);
            NodeList childtemp = temp.getChildNodes();
            if(childtemp.getLength() > 1){
                for (int i = 0; i<childtemp.getLength();i++){
                    Node child = childtemp.item(i);
                    NodeList childnode = child.getChildNodes();
                    if (i==1){
                        result = String.format("%s%s: %s\n", result , temp.getNodeName(), child.getTextContent());
                    }else if (childnode.getLength()>0){
                        result = String.format("%s       %s\n", result, child.getTextContent());
                    }
                }
                
            //We got more childs; Let's visit them as well
            }else if(childtemp.getLength() > 0){
                result = String.format("%s%s: %s\n", result, temp.getNodeName(), temp.getTextContent());
            }
          }
        return result;
    }

    /**
     * Web service operation
     */
    @WebMethod(operationName = "DeleteMovie")
    public String DeleteMovie(@WebParam(name = "nodeID") final int nodeID) throws Exception  {
        //NodeList nList = callXML();
        File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/web/movies.xml");
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc = docBuilder.parse(xmlFile);
        NodeList nList = doc.getElementsByTagName("film"); 
        
        
        String result = "XML file delete successfully";
        Element nfilm = (Element) nList.item(nodeID-1);
        nfilm.getParentNode().removeChild(nfilm);
        // Use a Transformer for output        
        SaveXML(doc);    
        return result;
    }
    
    public static void SaveXML(Document doc)throws Exception  {
        String filepath = "/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/web/UpdatemoviesSr.xml";
        // Use a Transformer for output
        TransformerFactory tFactory = TransformerFactory.newInstance();
        Transformer transformer = tFactory.newTransformer();
        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new File(filepath));//System.out);
        transformer.transform(source, result);
    }

    /**
     * Web service operation
     */
    @WebMethod(operationName = "addMovie")
    public String addMovie(@WebParam(name = "title") final String title, @WebParam(name = "year") final String year, @WebParam(name = "types") final String types, @WebParam(name = "time") int time, @WebParam(name = "director") final String director) throws Exception{
        String result = "";
        File xmlFile = new File("/home/nuyuyii/NetBeansProjects/Pro_ST/MovieWebService/web/movies.xml");
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc = docBuilder.parse(xmlFile);
        Element movie = (Element) doc.getDocumentElement();
        Element newfilm = doc.createElement("film");
        // Tranform Time: interger to String
        String mins = time+" min";
        // add Element to film
        newfilm.appendChild(getMovieElement(doc, "title", title));
        newfilm.appendChild(getMovieElement(doc, "year", year));
        newfilm.appendChild(getMovieElement(doc, "types", ""));
        newfilm.appendChild(getMovieElement(doc, "time", mins));
        newfilm.appendChild(getMovieElement(doc, "director", director));
        Element addtype = (Element) newfilm.getElementsByTagName("types").item(0);
        // add element types movie
        int index = 1;
        for (String type: types.split(",")){
            String name = "type"+index;
            addtype.appendChild(getMovieElement(doc, name, type));
            index++;
        }
        result = String.format("Title:%s-Year:%s-Types:%s-Time:%s-Director:%s", title,year,types,mins,director);

        // add element film to movie 
        movie.appendChild(newfilm);
        SaveXML(doc);    
        return result;
    }
    
    private static Node getMovieElement(Document doc, String name, String value){
        Element node = doc.createElement(name);
        node.appendChild(doc.createTextNode(value));
        System.out.println("Insert OK "+node.getTextContent());
        return node;
    }
}
